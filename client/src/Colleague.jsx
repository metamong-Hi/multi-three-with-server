/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useMemo, useRef } from 'react'
import { useGLTF, useAnimations, Html } from '@react-three/drei'
import { CapsuleCollider, RigidBody } from '@react-three/rapier';
import { ApplyShadow } from './Character';
import { Skeleton } from 'three';
import { SkeletonUtils } from 'three-stdlib';
import { useFrame, useGraph } from '@react-three/fiber';
import * as THREE from "three"
import { DEG2RAD } from 'three/src/math/MathUtils.js';

const COLLEAGUE_HEIGH = 1.79;
const COLLEAGUE_RADIUS = 0.3;

function Animation({ actions, refModel, refRigid, animationName, position, rotationY }) {
    useEffect(() => {
        const action = actions[animationName];
        action.reset().fadeIn(0.5).play();
        return () => {
            action?.fadeOut(0.5);
        }
    }, [ animationName ])

    useFrame((state, delta) => {
        // 회전
        if(refModel.current) {
            const rotationQ = new THREE.Quaternion();
            rotationQ.setFromAxisAngle(new THREE.Vector3(0,1,0), rotationY);
            refModel.current.quaternion.rotateTowards(rotationQ, DEG2RAD * 5);
        }

        // 위치
        if(refRigid.current) {
            const cy = refRigid.current.translation().y;
            refRigid.current.setTranslation({ x: position[0], y: cy, z: position[2] })
        }
    });
}

export function Model({ name = "익명", position, animationName="Idle", rotationY=0 }) {
    const group = useRef()
    const refRigid = useRef();

    // const { nodes, materials, animations } = useGLTF('/Robot.glb')
    const { scene, /*nodes,*/ materials, animations } = useGLTF('/Robot.glb');
    const clone = useMemo(() => { return SkeletonUtils.clone(scene); }, [scene]);
    const { nodes } = useGraph(clone);

    const { actions } = useAnimations(animations, group);

    return (
        <>
            <RigidBody lockRotations ref={refRigid} colliders={false} position={position}>
                <CapsuleCollider args={[COLLEAGUE_HEIGH / 2 - COLLEAGUE_RADIUS, COLLEAGUE_RADIUS]} />
                <group ref={group} dispose={null} position-y={-COLLEAGUE_HEIGH / 2}>
                    <group name="Scene">
                        <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
                            <skinnedMesh
                                name="Alpha_Joints"
                                geometry={nodes.Alpha_Joints.geometry}
                                material={materials.Alpha_Joints_MAT}
                                skeleton={nodes.Alpha_Joints.skeleton}
                            />
                            <skinnedMesh
                                name="Alpha_Surface"
                                geometry={nodes.Alpha_Surface.geometry}
                                material={materials.Alpha_Body_MAT}
                                skeleton={nodes.Alpha_Surface.skeleton}
                            />
                            <primitive object={nodes.mixamorigHips} />
                        </group>
                        <Html wrapperClass='character-name'
                            position-y={COLLEAGUE_HEIGH + COLLEAGUE_HEIGH / 13} center>
                            {name}
                        </Html>
                    </group>
                </group>
            </RigidBody>
            <ApplyShadow refTarget={group} />
            <Animation actions={actions} refModel={group} refRigid={refRigid}
                animationName={animationName} position={position} rotationY={rotationY} />
        </>
    )
}

useGLTF.preload('/Robot.glb')
